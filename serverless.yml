service: newsletter-service

frameworkVersion: '3'

package:
  individually: true
  excludeDevDependencies: true

plugins:
  - serverless-offline
  - serverless-localstack
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-prune-plugin
  - serverless-deployment-bucket

provider:
  name: aws
  runtime: ${self:custom.defaults.lambda.runtime}
  stage: ${self:custom.defaults.stage}
  region: ${self:custom.defaults.region}
  tracing:
    lambda: true
  deploymentBucket:
    name: ${self:service}-${self:provider.region}-${aws:accountId}
    serverSideEncryption: AES256
  environment:
    LOCALSTACK_ENDPOINT: http://172.31.153.196:4566
    STAGE: ${self:custom.defaults.stage}

custom:
  base: ${self:service}-${self:provider.stage}
  defaults: ${file(./defaults/sls.yml):defaults}
  tables:
    newsLetterTable: ${self:custom.base}-news-letter-table
  webpack:
    webpackConfig: ./webpack.config.js
    keepOutputDirectory: true
    includeModules:
      forceExclude:
        - '@aws-sdk/client-dynamodb'
        - '@aws-sdk/lib-dynamodb'
  prune:
    automatic: true
    number: 2
  localstack:
    host: http://localhost
    debug: true
    autostart: false
    stages:
      - local
    S3: http://localhost:4572
    DynamoDB: http://localhost:4570
    CloudFormation: http://localhost:4581
    SNS: http://localhost:4575
    SQS: http://localhost:4576
    Lambda: http://localhost:4574
    Kinesis: http://localhost:4568
    IAM: http://localhost:4566
    STS: http://localhost:4566

functions:
  subscribe:
    handler: src/handlers/subscribe.handler
    timeout: ${self:custom.defaults.lambda.timeout}
    memorySize: ${self:custom.defaults.lambda.memorySize}
    environment:
      NEWSLETTER_TABLE_NAME: ${self:custom.tables.newsLetterTable}
    events:
      - sqs:
          batchSize: 5
          maximumBatchingWindow: 60
          arn:
            Fn::GetAtt:
              - SubscribeNewsQueue
              - Arn
    iamRoleStatements:
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTraceSegments
          - xray:PutTraceSegment
          - xray:PutTelemetryRecords
          - xray:GetSamplingRules
          - xray:GetSamplingTargets
          - xray:GetSamplingStatisticSummaries
        Resource: '*'

resources:
  Resources:
    NewsLetterTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.tables.newsLetterTable}
        KeySchema:
          - AttributeName: 'pk'
            KeyType: 'HASH'
          - AttributeName: 'sk'
            KeyType: 'RANGE'
        AttributeDefinitions:
          - AttributeName: 'pk'
            AttributeType: 'S'
          - AttributeName: 'sk'
            AttributeType: 'S'
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    SubscribeNewsQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: ${self:custom.base}-subscribe-news-queue
        MessageRetentionPeriod: 3600 # 1 hours in seconds
        VisibilityTimeout: 30
        ReceiveMessageWaitTimeSeconds: 20
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - 'DeadLetterQueueSubscribeNews'
              - 'Arn'
          maxReceiveCount: 3
    DeadLetterQueueSubscribeNews:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: ${self:custom.base}-dld-subscribe-news-queue
    SubscribeNewsTopic:
      Type: 'AWS::SNS::Topic'
      Properties:
        DisplayName: ${self:custom.base}-subscribe-news-topic
    NewsQueueSubscriptionToNewsTopic:
      Type: 'AWS::SNS::Subscription'
      Properties:
        Protocol: sqs
        TopicArn:
          Ref: 'SubscribeNewsTopic'
        Endpoint:
          Fn::GetAtt:
            - 'SubscribeNewsQueue'
            - 'Arn'
    UnsubscribeNewsQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: ${self:custom.base}-unsubscribe-news-queue
        MessageRetentionPeriod: 3600 # 1 hours in seconds
        VisibilityTimeout: 30
        ReceiveMessageWaitTimeSeconds: 20
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - 'DeadLetterQueueUnsubscribeNews'
              - 'Arn'
          maxReceiveCount: 3
    DeadLetterQueueUnsubscribeNews:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: ${self:custom.base}-dld-unsubscribe-news-queue
    UnsubscribeNewsTopic:
      Type: 'AWS::SNS::Topic'
      Properties:
        DisplayName: ${self:custom.base}-unsubscribe-news-topic
    NewsQueueUnsubscriptionToNewsTopic:
      Type: 'AWS::SNS::Subscription'
      Properties:
        Protocol: sqs
        TopicArn:
          Ref: 'UnsubscribeNewsTopic'
        Endpoint:
          Fn::GetAtt:
            - 'UnsubscribeNewsQueue'
            - 'Arn'
